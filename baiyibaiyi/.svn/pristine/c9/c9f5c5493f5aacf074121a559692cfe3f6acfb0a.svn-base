package com.baogang.bycx.activity

import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.support.v7.widget.GridLayoutManager
import com.baogang.bycx.R
import com.baogang.bycx.adapter.PhotoAdapter
import com.baogang.bycx.callback.SecData
import com.baogang.bycx.constant.Config
import com.baogang.bycx.constant.RequestUrls
import com.baogang.bycx.request.VerifyInfoRequest
import com.baogang.bycx.utils.*
import com.baogang.bycx.view.CustomAlertDialog
import kotlinx.android.synthetic.main.activity_connect_return_car.*
import kotlinx.android.synthetic.main.title_back.*
import me.iwf.photopicker.PhotoPreview
import me.iwf.photopicker.utils.ImageCaptureManager
import me.iwf.photopicker.utils.PermissionsConstant
import me.iwf.photopicker.utils.PermissionsUtils
import java.io.File
import java.io.IOException
import java.util.HashMap
import kotlin.collections.ArrayList
import android.R.attr.spacing



/**
 * Created by wujiancheng on 2017/11/9.
 * 联系客服还车
 */
class ConnectReturnCarActivity : BaseActivity() {
    //照片展示列表
    private var selectedPhotos = ArrayList<String>()
    private var photoAdapter: PhotoAdapter? = null
    private var captureManager: ImageCaptureManager? = null

    var orderId = ""
    var category = "returnTheCar"
    var batchNumber = ""
    var cause = ""
    private val photoFiles = arrayListOf<File>()//上传的图片文件

    var hasUpload = false//是否上传过图片

    override fun setView() {
        setContentView(R.layout.activity_connect_return_car)
    }

    override fun initDatas() {
        orderId = intent.getStringExtra("orderId")
        cause = intent.getStringExtra("cause")
        batchNumber = System.currentTimeMillis().toString()

        tvTitleName.text = "联系客服还车"
        tvConnect.background.alpha=200
        ivTitleLeft.setOnClickListener { finish() }
        //查看示例
        tvLookSample.setOnClickListener { startActivity(Intent(mContext, CannotReturnSampleActivity::class.java)) }
        //联系客服
        tvConnect.setOnClickListener {
            if (hasUpload) {
                val info = CacheUtils.getIn().system_Info
                val uri = Uri.parse("tel:" + info?.kfphone)
                val intent = Intent(Intent.ACTION_DIAL, uri)
                startActivity(intent)
            } else {
                ToastUtil.show(mContext, "请上传图片")
            }
        }
        //最多5张
        Config.MAX_PHOTO = 5
        //选中照片展示
        photoAdapter = PhotoAdapter(mContext, selectedPhotos, false)
        rvCarImgs.isNestedScrollingEnabled = false
        val spacingInPixels = resources.getDimensionPixelSize(R.dimen.dimen_10dp)
        rvCarImgs.addItemDecoration(SpacesItemDecoration(spacingInPixels))
        rvCarImgs.layoutManager = GridLayoutManager(mContext, 4)
        rvCarImgs.adapter = photoAdapter
        photoAdapter?.setOnPreviewPhotoListener {
            position ->
            if (position in selectedPhotos.indices) {
                //照片预览
                PhotoPreview.builder()
                        .setPhotos(selectedPhotos)
                        .setCurrentItem(position)
                        .setShowDeleteButton(false)
                        .start(mContext as ConnectReturnCarActivity)
            } else {
                if (PermissionsUtils.checkCameraPermission(this) && PermissionsUtils.checkWriteStoragePermission(this)) {
                    openCamera()
                }
            }
        }
    }

    override fun onComplete(result: String?, type: Int) {

    }

    override fun onFailure(msg: String?, type: Int) {

    }

    /**
     * 拍照
     */
    private fun openCamera() {
        try {
            captureManager = ImageCaptureManager(mContext)
            val intent = captureManager?.dispatchTakePictureIntent()
            startActivityForResult(intent, ImageCaptureManager.REQUEST_TAKE_PHOTO)
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            when (requestCode) {
                PermissionsConstant.REQUEST_CAMERA, PermissionsConstant.REQUEST_EXTERNAL_WRITE ->
                    if (PermissionsUtils.checkWriteStoragePermission(this) && PermissionsUtils.checkCameraPermission(this)) {
                        openCamera()
                    }
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == ImageCaptureManager.REQUEST_TAKE_PHOTO && resultCode == RESULT_OK) {
            //拍照
            if (captureManager == null) {
                captureManager = ImageCaptureManager(this)
            }

            //将拍照完的图片更新到相册
            captureManager?.galleryAddPic()
            val path: String? = captureManager?.currentPhotoPath

            uploadFile(path)
        }
    }

    /**
     *上传发票图片
     */
    private fun uploadFile(path: String?) {
        val uploadFile = UploadFile(object : UploadFile.UploadImgListener {

            override fun before() {
                doCheck("正在上传...", true)
            }

            override fun after(response: SecData?) {
                if (response != null) {
                    if (response.code == Config.REQUEST_SUCCESS) {
                        //上传压缩的图片成功后删除掉
                        for (file in photoFiles) {
                            if (file.exists()) {
                                file.delete()
                                FileUtil2.updateFileFromDatabase(mContext, file)
                            }
                        }
                        //上传成功后更新界面
                        selectedPhotos.add(path ?: "")
                        photoAdapter?.setData(selectedPhotos)
                        closeDialog()
                        ToastUtil.show(mContext, "上传成功")
                        if (!hasUpload) {
                            hasUpload = true
                            tvConnect.background.alpha=255
                        }
                    } else {
                        closeDialog()
                        showTipDialog(response.msg)
                    }
                } else {
                    closeDialog()
                    showTipDialog("上传失败")
                }
                photoFiles.clear()
            }
        }, application)
        val compressBitmap = ImageUtil.compressBitmapKeepTrue(path)
        val file = FileUtil2.saveBitmapToNew(mContext, compressBitmap, path)
        val files = hashMapOf<String, File>()
        files.put("imgFile", file)
        uploadFile.setFiles(files)
        if (null != file) {
            photoFiles.add(file)
        }
        val params = HashMap<String, String>()
        params.put("orderId", orderId)
        params.put("category", category)
        params.put("batchNumber", batchNumber)
        params.put("cause", cause)
        logI("上传参数=" + params)
        uploadFile.setParams(params)
        uploadFile.setMethod(RequestUrls.UPLOAD_RETURN_CAR_IMG)
        uploadFile.upLoad(VerifyInfoRequest())
    }

    private fun showTipDialog(msg: String) {
        val alertDialog = CustomAlertDialog.getAlertDialog(mContext, true, true)
        alertDialog.setMessage(msg)
                .setBtnConfirmColor(R.color.new_primary)
                .setOnPositiveClickListener("确定") { alertDialog.dismiss() }.show()
    }
}