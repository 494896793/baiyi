package www.qisu666.com.activity;

import android.Manifest;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Point;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.LinearInterpolator;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.location.AMapLocationListener;
import com.amap.api.maps.AMap;
import com.amap.api.maps.AMapOptions;
import com.amap.api.maps.AMapUtils;
import com.amap.api.maps.CameraUpdateFactory;
import com.amap.api.maps.LocationSource;
import com.amap.api.maps.MapView;
import com.amap.api.maps.Projection;
import com.amap.api.maps.UiSettings;
import com.amap.api.maps.model.BitmapDescriptor;
import com.amap.api.maps.model.BitmapDescriptorFactory;
import com.amap.api.maps.model.CameraPosition;
import com.amap.api.maps.model.LatLng;
import com.amap.api.maps.model.Marker;
import com.amap.api.maps.model.MarkerOptions;
import com.amap.api.maps.model.MyLocationStyle;
import com.amap.api.maps.model.NaviPara;
import com.amap.api.services.core.LatLonPoint;
import com.amap.api.services.geocoder.GeocodeQuery;
import com.amap.api.services.geocoder.GeocodeResult;
import com.amap.api.services.geocoder.GeocodeSearch;
import com.amap.api.services.geocoder.RegeocodeQuery;
import com.amap.api.services.geocoder.RegeocodeResult;
import www.qisu666.com.R;
import www.qisu666.com.adapter.StationListAdapter;
import www.qisu666.com.anim.CloseEvarlutor;
import www.qisu666.com.anim.OpenEvarlutor;
import www.qisu666.com.app.MyApplication;
import www.qisu666.com.droid.Activity_SelectCity;
import www.qisu666.com.event.CemareOnActivityResultEvent;
import www.qisu666.com.event.ControlerCloseEvent;
import www.qisu666.com.event.Message;
import www.qisu666.com.fragment.BaseFragment;
import www.qisu666.com.request.utils.FlatFunction;
import www.qisu666.com.request.utils.MyMessageUtils;
import www.qisu666.com.request.utils.ResultSubscriber;
import www.qisu666.com.request.utils.RxNetHelper;
import www.qisu666.com.sdk.stationMap.StationLocation;
import www.qisu666.com.sdk.stationMap.juhe.MarkerImageView;
import www.qisu666.com.utils.CacheUtils;
import www.qisu666.com.utils.ConstantCode;
import www.qisu666.com.utils.DialogHelper;
import www.qisu666.com.utils.Distance;
import www.qisu666.com.utils.JsonUtils;
import www.qisu666.com.utils.LogUtils;
import www.qisu666.com.utils.MapUtils;
import www.qisu666.com.utils.PermissionUtil;
import www.qisu666.com.utils.ScreenUtils;

import www.qisu666.com.utils.ToastUtil;
import www.qisu666.com.widget.LoadingDialog;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.squareup.picasso.Picasso;
import com.ta.utdid2.android.utils.NetworkUtils;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.xutils.common.util.LogUtil;
import org.xutils.x;

import java.io.File;
import java.math.BigDecimal;
import java.net.URISyntaxException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



//桩点列表
public class PointAggregationAty extends BaseFragment implements AMap.OnMapLoadedListener, LocationSource, OnClickListener, AMap.OnCameraChangeListener, AMap.OnMarkerClickListener, AMapLocationListener, GeocodeSearch.OnGeocodeSearchListener {

    private MapView mapView;//**  地图view  */
    private AMap aMap;    //***  高德amap */
    private int screenHeight;// 屏幕高度(px)
    private int screenWidth;// 屏幕宽度(px)
    private ArrayList<MarkerOptions> markerOptionsListall = new ArrayList<MarkerOptions>();    //** 所有的marker  */
    private ArrayList<MarkerOptions> markerOptionsListInView = new ArrayList<MarkerOptions>();//**  视野内的marker  */
    private ImageView img_location;
    private LinearLayout tips;
    private RelativeLayout point_main;


    /**
     * 新添加  全部桩子的数据结构  ,保存从数据库中查询到的数据
     */
    List<StationLocation> infoList = new ArrayList<>();
    private List<Map<String, Object>> list = new ArrayList<>();
    Map<String, Object> maps_info;//全部桩子缓存

    private double curLat, curLon, markerLat, markerLon;//当前位置经纬度
    private boolean favorFlag = false;      //当前站点是否被收藏

    private TextView current_city;//当前城市
    private String current_city_str = "";//当前城市str
    //筛选条件
    private String charge_interface, charge_carr, charge_method, charge_pile_bel, parking_free, service_time;
    private Map<String, String> filterMap;  //当前筛选条件集合

    private LocationSource.OnLocationChangedListener mListener;//当前位置监听
    private GeocodeSearch geocoderSearch;                    //反地理编码
    //当前是否geo定位
    LatLonPoint afterGeoPoint;     //geo编码后的点
    private boolean isGeo = false; //是否切换城市
    private LoadingDialog dialog;           //请求定位的Dialog

    private PopupWindow mapPopupWindow;
    private AMapLocationClient mlocationClient;

    private String area_code = "5810";//定位城市code
    private String cityCode = "5801";

    //桩点列表
    private ImageView right_btn, imgCharge;

    private RelativeLayout layout_map, rl_list_frame, layout_main;
    private StationListAdapter adapter;
    private PullToRefreshListView lv_station_list;
    private boolean isShowList = false;
    TextView title;



    private void initTitleBar(View view) {
        title = (TextView) view.findViewById(R.id.tv_title);
        title.setText("桩点地图");
        View left_btn = view.findViewById(R.id.img_title_left);
        left_btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isShowList) {
                    showOrHideList();
                    return;
                } else {
//                    finish();
                }//兼容列表的返回

            }
        });

        current_city = (TextView) view.findViewById(R.id.current_city);//当前城市
        current_city.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
            }
        });

    }



    void initView(View view) {
        img_location = (ImageView) view.findViewById(R.id.img_location);
        imgCharge = (ImageView) view.findViewById(R.id.img_charge);
        img_location.setOnClickListener(this);
        rl_list_frame = (RelativeLayout) view.findViewById(R.id.rl_list_frame);
        EventBus.getDefault().post(new ControlerCloseEvent(2));
        rl_list_frame.setVisibility(View.GONE);
        layout_map = (RelativeLayout) view.findViewById(R.id.layout_map);
        layout_main = (RelativeLayout) view.findViewById(R.id.point_main);
        lv_station_list = (PullToRefreshListView) view.findViewById(R.id.lv_station_list);
        lv_station_list.setMode(PullToRefreshBase.Mode.BOTH);

        lv_station_list.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2<ListView>() {

            //下拉刷新时会回调的方法
            @Override
            public void onPullDownToRefresh(PullToRefreshBase<ListView> pullToRefreshBase) {
                pageIndex = 1;
            }

            //上啦加载时执行的方法
            @Override
            public void onPullUpToRefresh(PullToRefreshBase<ListView> pullToRefreshBase) {
                pageIndex++;
            }
        });

        lv_station_list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                station_id = list.get(position).get("stationId").toString();
                station_name = list.get(position).get("stationName").toString();
            }
        });
        imgCharge.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                    Intent i = new Intent(getActivity(), LoginActivity.class);
                    startActivityForResult(i, ConstantCode.REQ_LOGIN);
            }
        });
        initFilter(view);
    }


    /**
     * 初始化筛选条件
     */
    private void initFilter(final View view) {
        right_btn = (ImageView) view.findViewById(R.id.img_title_right);
        ImageView right_btn2 = (ImageView) view.findViewById(R.id.img_title_right2);
        right_btn.setImageResource(R.mipmap.ic_station_list);
        right_btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showOrHideList();
            }
        });
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view=inflater.inflate(R.layout.activity_point_aggregation,null);
        initTitleBar(view);
        DisplayMetrics dm = new DisplayMetrics();
        getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);
        screenWidth = ScreenUtils.getScreenWidth(getActivity());
        screenHeight = ScreenUtils.getScreenHeight(getActivity());
        mapView = (MapView) view.findViewById(R.id.map);
        tips=view.findViewById(R.id.tips);
        mapView.onCreate(savedInstanceState);// 方法必须重写

        if (aMap == null) {
            aMap = mapView.getMap();
            UiSettings mUiSettings = aMap.getUiSettings();//拿到地图工具类
            mUiSettings.setTiltGesturesEnabled(false);// 禁用倾斜手势。
            mUiSettings.setRotateGesturesEnabled(false);// 禁用旋转手势。
            mUiSettings.setZoomPosition(AMapOptions.ZOOM_POSITION_RIGHT_BUTTOM);//放大缩小按钮放在屏幕中间
            aMap.setOnMarkerClickListener(this);// 设置点击marker事件监听器
            aMap.setOnCameraChangeListener(this);// 对amap添加移动地图事件监听器
        }

        MyLocationStyle myLocationStyle = new MyLocationStyle(); // 自定义系统定位小蓝点
//        myLocationStyle.myLocationIcon(BitmapDescriptorFactory.fromResource(R.drawable.my_location_marker));// 设置小蓝点的图标
//        myLocationStyle.strokeColor(android.R.color.transparent);// 设置圆形的边框颜色
//        myLocationStyle.radiusFillColor(Color.argb(100,55,115,203));// 设置圆形的填充颜色
//        myLocationStyle.anchor(0.5f, 0.5f);//设置小蓝点的锚点
//        aMap.setMyLocationStyle(myLocationStyle);
        myLocationStyle.strokeColor(Color.argb(0, 0, 0, 0));// 设置圆形的边框颜色
        myLocationStyle.radiusFillColor(Color.argb(0, 0, 0, 0));// 设置圆形的填充颜色   这两句取消原形边框
        aMap.setMyLocationStyle(myLocationStyle);

        aMap.setLocationSource(this);// 设置定位监听
//        aMap.getUiSettings().setMyLocationButtonEnabled(true);// 设置定位按钮是否显示
//        aMap.getUiSettings().setZoomControlsEnabled(true);// 设置缩放按钮是否显示
        aMap.setMyLocationEnabled(true);


        tips.getBackground().setAlpha(240);

        try {//先获取到当前位置
            mlocationClient = new AMapLocationClient(getActivity());
            AMapLocationClientOption mLocationOption = new AMapLocationClientOption();
            mlocationClient.setLocationListener(this);//设置定位监听
            mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);//设置为高精度定位模式
            mlocationClient.setLocationOption(mLocationOption);//设置定位参数
            mLocationOption.setOnceLocation(true);
            mlocationClient.startLocation();
            x.task().postDelayed(new Runnable() {
                @Override
                public void run() {
                    x.task().autoPost(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                mlocationClient.stopLocation();
                            } catch (Throwable t) {
                                t.printStackTrace();
                            }
                        }
                    });
                }
            }, 1500);
        } catch (Throwable t) {
            t.printStackTrace();
        }
        geocoderSearch = new GeocodeSearch(getActivity());
        geocoderSearch.setOnGeocodeSearchListener(this);
        initView(view);
        initPopupWindow();
        // 添加临时数据
        initDatass();

        CameraPosition.Builder builder = CameraPosition.builder();
        builder.target(new LatLng(22.5472000000, 114.0842620000));//先移动地图到广州   反地理编码失效
        builder.zoom(16.0f);
        aMap.moveCamera(CameraUpdateFactory.newCameraPosition(builder.build()));
        return view;
    }



    public void initDatass() {//模拟1000条数据
    }

    @Override
    public int setLayoutResId() {
        return 0;
    }

    @Override
    public void initDatas(View view) {

    }

    @Override
    public void onComplete(String result, int type) {

    }

    @Override
    public void onFailure(String msg, int type) {

    }

    float leavel = 0;

    @Override
    public boolean onMarkerClick(Marker marker) {
        return true;
    }


    /**
     * 新添加 单个桩点信息的重载
     */
    @SuppressLint("SetTextI18n")
    private void showPopWindow(Map<String, Object> map) throws JSONException {
//        Object oRecordList = map.get("record_list");
//        JSONObject object_item = null;
        if (null != map) {
//            String recordList = oRecordList.toString();
//            object_item = new JSONObject(recordList);
//
//            LogUtils.d("recordList: " + object_item);
//            try {
//                JSONArray array = new JSONArray(recordList);
//                int count = array.length();
//                if (count == 0) {
//                    DialogHelper.alertDialog(StationMapActivity_amap.this, getString(R.string.dialog_D101_no_data));
//                } else {
//                    object_item = array.getJSONObject(0);//拿到信息后   String oString = object_item.toString();// LogUtils.d("oString: " + oString);
//                }
//            } catch (Throwable t) {
//                t.printStackTrace();
//            }
//            if (object_item == null) {
//                return;
//            }
            String is_favor = map.get("isFavor").toString();
            favorFlag = is_favor.equals("0");
            if (is_favor.equals("0")) {
                Picasso.with(getActivity()).load(R.mipmap.ic_collection_yellow).noFade().into(iv_collection);
            } else if (is_favor.equals("1")) {
                Picasso.with(getActivity()).load(R.mipmap.ic_collection_gray).noFade().into(iv_collection);
            }
            station_name = map.get("stationName").toString();
            tv_map_title.setText(map.get("stationName").toString());


//            double   charge_fee= new BigDecimal((String) object_item.get("charge_fee_per")).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();//保留两位小数
//            double   service_fee= new BigDecimal((String) object_item.get("service_fee")).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();//保留两位小数
//            double   park_fee= new BigDecimal((String) object_item.get("park_fee")).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();//保留两位小数
//
//            tv_charging_fee.setText(charge_fee+"");       //当前电费
//            tv_service_fee.setText(service_fee+"");       //服务费
//            tv_station_parking_fee.setText(park_fee+"");  //停车费

            try {//当前电费  计算结果
                double chargingfee = Double.parseDouble(map.get("chargeFeePer").toString());
                double servicefee = Double.parseDouble(map.get("serviceFee").toString());
                tv_charging_fee.setText(new BigDecimal(chargingfee - servicefee).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue() + "");//充电费=chargingFee-服务费
            } catch (Throwable t) {
                t.printStackTrace();
            }

//            tv_charging_fee.setText((String) object_item.get("charge_fee_per"));//当前电费  未计算
            tv_service_fee.setText(map.get("serviceFee").toString());//服务费
            tv_station_parking_fee.setText(map.get("parkFee").toString());//停车费

            String s1_lat = map.get("latitude").toString();
            String s1_lon = map.get("longitude").toString();

            double km = 0.0;
            try {
                double lat = Double.parseDouble(s1_lat);
                double lon = Double.parseDouble(s1_lon);
                km = Distance.getDistance(curLat, curLon, lat, lon);
                km = new BigDecimal(km).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();//保留两位小数
            } catch (Throwable t) {
                t.printStackTrace();
                km = 0.0;
            }
            tv_map_distance.setText(new BigDecimal(map.get("chargeDistance").toString()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue() + " km");

//            double b = new BigDecimal((String) object_item.get("charge_distance")).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();
//            tv_map_distance.setText(String.valueOf(b) + "km");
            tv_free_fast.setText("空闲" + map.get("pileFastNumFree").toString());
            tv_free_slow.setText("空闲" + map.get("pileSlowNumFree").toString());
            tv_map_address.setText(map.get("chargeAddress").toString());
            // tv_elec_type.setText(markerModel.getElec_type().equals("00") ? "交流" : markerModel.getElec_type().toString().equals("01") ? "直流" : "直流/交流");
            tv_elec_type.setText("总桩数" + map.get("totalPileCount").toString());
            pop.showAtLocation(layout_main, Gravity.BOTTOM, 0, 0);
        }
    }


    /**
     * 桩子信息等textview的声明
     */
    private TextView tv_map_address, tv_map_title, tv_charging_fee, tv_service_fee, tv_station_parking_fee, tv_map_distance, tv_free_fast, tv_free_slow, tv_elec_type;
    private ImageView iv_collection;
    private View p_station_window;
    private PopupWindow pop;
    private String station_id = ""; //选中的站点id
    private String station_name = "";//选中的站点名称

    /**
     * 站点详情PopupWindow
     */
    private void initPopupWindow() {
    }


    @Override
    public void onCameraChange(CameraPosition cameraPosition) {
    } //地图改变时

    boolean isfistFinish = false;//首次进入地图 缩放级别16

    @Override
    public void onCameraChangeFinish(CameraPosition cameraPosition) {

        try {
            locationMarker = null;
        } catch (Throwable t) {
            t.printStackTrace();
        }
        resetMarks();
        //可在其中解析amapLocation获取相应内容。
        try {
            aMap.getMapScreenMarkers().remove(locationMarker);
        } catch (Throwable t) {
            t.printStackTrace();
        }
        x.task().postDelayed(new Runnable() {
            @Override
            public void run() {
                try {//尝试添加自己位置的图标
                    LatLng latLng = new LatLng(curLat, curLon);//取出经纬度
                    //添加Marker显示定位位置
                    if (locationMarker == null) {
                        //如果是空的添加一个新的,icon方法就是设置定位图标，可以自定义
                        MarkerOptions markerOptions = new MarkerOptions();
                        markerOptions.position(latLng);
                        markerOptions.visible(true);
                        markerOptions.title("当前位置");
                        BitmapDescriptor bitmapDescriptor = BitmapDescriptorFactory.fromBitmap(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_nearby_charge));
                        markerOptions.icon(bitmapDescriptor);
                        aMap.addMarker(markerOptions);
                        locationMarker = aMap.addMarker(markerOptions);
                        if (isfistFinish) {
                            CameraPosition.Builder builder = CameraPosition.builder();
                            builder.target(latLng);//移动地图到定位地点
                            builder.zoom(16.0f);
                            aMap.moveCamera(CameraUpdateFactory.newCameraPosition(builder.build()));
                            isfistFinish = false;
                        }

//				locationMarker.showInfoWindow();//主动显示indowindow
//			aMap.addText(new TextOptions().position(latLng).text(aMapLocation2.getAddress()));
                        //固定标签在屏幕中央
//                    locationMarker.setPositionByPixels(aMap.getWidth() / 2,mMapView.getHeight() / 2);
                    } else {
                        //已经添加过了，修改位置即可
                        locationMarker.setPosition(latLng);
                        if (isfistFinish) {
                            CameraPosition.Builder builder = CameraPosition.builder();
                            builder.target(latLng);//移动地图到定位地点
                            builder.zoom(16.0f);
                            aMap.moveCamera(CameraUpdateFactory.newCameraPosition(builder.build()));
                            isfistFinish = false;
                        }
                    }


                } catch (Throwable t) {
                    t.printStackTrace();
                }
            }
        }, 2000);


    }// 地图改变完之后的监听

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        mapView.onSaveInstanceState(outState);
    }//必须重写

    @Override
    public void onPause() {
        super.onPause();
        mapView.onPause();
    }

    @Override
    public void onResume() {
        super.onResume();
        mapView.onResume();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        try {
            markerOptionsListall.clear();
        } catch (Throwable t) {
            t.printStackTrace();
        }
        try {
            mapView.onDestroy();
        } catch (Throwable t) {
            t.printStackTrace();
        }
    }


    //聚合  入口点

    /**
     * 获取视野内的marker 根据聚合算法合成自定义的marker 显示视野内的marker
     */
    private void resetMarks() {
    }

    /**
     * 统一处理click事件
     */
    @Override
    public void onClick(View v) {
    }


    int pageIndex = 1;

    //桩子列表
    private void showOrHideList() {
    }

    /**
     * 包路径是否存在
     */
    private boolean isInstallByread(String packageName) {
        return new File("/data/data/" + packageName).exists();
    }

    /**
     * 响应逆地理编码
     */
    public void getAddress(final LatLonPoint latLonPoint) {
    }

    /**
     * activity返回的结果result
     */
    @Subscribe
    public void onEvent(CemareOnActivityResultEvent event) {
    }


    //激活高德地图的回调
    @Override
    public void activate(LocationSource.OnLocationChangedListener onLocationChangedListener) {
    }

    @Override
    public void deactivate() {

    }

    Marker locationMarker = null;

    @Override
    public void onLocationChanged(final AMapLocation aMapLocation2) {
//		}
    }


    @Override
    public void onRegeocodeSearched(RegeocodeResult regeocodeResult, int rCode) {

    }

    @Override
    public void onGeocodeSearched(GeocodeResult geocodeResult, int i) {
    }

//    @Override
//    protected void onRestoreInstanceState(Bundle savedInstanceState) {
//        super.onRestoreInstanceState(savedInstanceState);
//    }

    /**
     * 重写返回键,解决列表返回异常
     */
//    @Override
//    public void onBackPressed() { //正在显示列表的话// isShowList = !isShowList;
//        if (isShowList) {
//            showOrHideList();
//            return;
//        } else {
//            super.onBackPressed();
//        }
//    }

    @Override
    public void onMapLoaded() {

    }


}
