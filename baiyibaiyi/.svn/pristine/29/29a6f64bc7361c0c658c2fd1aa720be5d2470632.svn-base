package com.baogang.bycx.activity;

import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.NonNull;
import android.view.KeyEvent;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.baogang.bycx.R;
import com.baogang.bycx.app.MyApplication;
import com.baogang.bycx.app.UserState;
import com.baogang.bycx.callback.CarParkResp;
import com.baogang.bycx.callback.CarResp;
import com.baogang.bycx.callback.ParkingFeeAuditStatusResp;
import com.baogang.bycx.callback.ParksResp;
import com.baogang.bycx.callback.UseFeeResp;
import com.baogang.bycx.callback.UserInfoResp;
import com.baogang.bycx.constant.Config;
import com.baogang.bycx.constant.RequestUrls;
import com.baogang.bycx.receiver.PublicReceiver;
import com.baogang.bycx.request.ControlCarRequest;
import com.baogang.bycx.request.ParkingFeeAuditStatusRequest;
import com.baogang.bycx.request.RecordChooseParkRequest;
import com.baogang.bycx.request.UseCarCostRequest;
import com.baogang.bycx.rx.RxBus;
import com.baogang.bycx.rx.RxBusEvent;
import com.baogang.bycx.rx.RxEventCodes;
import com.baogang.bycx.utils.CacheUtils;
import com.baogang.bycx.utils.Logger;
import com.baogang.bycx.utils.SBUtils;
import com.baogang.bycx.utils.StringUtils;
import com.baogang.bycx.utils.ToastUtil;
import com.baogang.bycx.view.CarInfoView;
import com.baogang.bycx.view.CustomAlertDialog;
import com.baogang.bycx.view.CustomAlertDialog2;
import com.baogang.bycx.view.FeeUnitMoneyTipView;
import com.baogang.bycx.view.ReturnCarParkNaviView;
import com.baogang.bycx.view.UseCarCostView;

import java.lang.ref.WeakReference;

import butterknife.BindView;
import butterknife.OnClick;
import me.iwf.photopicker.utils.PermissionsConstant;
import me.iwf.photopicker.utils.PermissionsUtils;
import rx.functions.Action1;

/**
 * Created by wujiancheng on 2017/7/29.
 * 立即还车
 */

public class UseCarReturnActivity extends BaseActivity {
    private static final String TAG = UseCarReturnActivity.class.getSimpleName();
    private static final int FIND_CAR_CODE = 2;
    private static final int OPEN_DOOR_CODE = 3;
    private static final int CLOSE_DOOR_CODE = 4;
    private static final int USE_CAR_COST = 5;
    private static final int POWER_ON_CODE = 8;
    private static final int POWER_OFF_CODE = 9;
    private static final int QUERY_AUDIT_STATUS = 6;//查询停车费报销审核进度
    private static final int RECORD_CHOOSE_PARK = 7;//记录选择的还车网点

    private static final String FIND_CAR = "findCar";//-找车
    private static final String OPEN_DOOR = "openDoor";//-打开车门
    private static final String POWER_ON = "POWER_ON";    //开启动力
    private static final String POWER_OFF = "POWER_OFF";    //关闭动力
    private static final String CLOSE_DOOR = "closeDoor";//-关闭车门

    @BindView(R.id.tvTitleName)
    TextView tvTitleName;
    @BindView(R.id.tvTitleRight)
    TextView tvTitleRight;
    @BindView(R.id.carInfoView)
    CarInfoView carInfoView;
    @BindView(R.id.useCarCostView)
    UseCarCostView useCarCostView;
    @BindView(R.id.returnCarParkNaviView)
    ReturnCarParkNaviView returnCarParkNaviView;
    @BindView(R.id.power_line)
    View power_line;
    @BindView(R.id.power_linear)
    LinearLayout power_linear;
    @BindView(R.id.close_power)
    ImageView close_power;
    @BindView(R.id.open_power)
    ImageView open_power;
    @BindView(R.id.close_power_linear)
    LinearLayout close_power_linear;
    @BindView(R.id.open_power_linear)
    LinearLayout open_power_linear;

    private PublicReceiver closeHandler;
    private String orderId;

    //复活
    private CarResp carResp;
    //是否处于复活状态
    private boolean isRevival = false;
    private int useTime;//分钟

    private ParksResp parksRespChooseReturn;
    private MyHandler handler;

    private static class MyHandler extends Handler {
        WeakReference<UseCarReturnActivity> weakReference;

        public MyHandler(UseCarReturnActivity activity) {
            weakReference = new WeakReference<UseCarReturnActivity>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 1:
                    if (null != weakReference) {
                        UseCarReturnActivity activity = weakReference.get();
                        if (activity != null) {
                            activity.getFee();
                            Message message = activity.handler.obtainMessage();
                            message.what = 1;
                            activity.handler.sendMessageDelayed(message, 1000 * 60);

                        }
                    }
                    break;
            }
        }
    }

    @Override
    public void setView() {
        setContentView(R.layout.activity_use_car_return);
    }

    @Override
    public void initDatas() {
        tvTitleName.setText("用车");
        tvTitleRight.setText("车辆位置");
        Intent intent = getIntent();
        carResp = (CarResp) intent.getSerializableExtra("carResp");
        orderId = intent.getStringExtra("orderId");

        returnCarParkNaviView.setFrom(RxEventCodes.CODE_SEARCH_PARK_FROM_USE_CAR);
        //选择的还车网点
        parksRespChooseReturn = (ParksResp) getIntent().getSerializableExtra("parksRespChooseReturn");

        UserInfoResp mUser = CacheUtils.getIn().getUserInfo();
        if (MyApplication.isLoginSuccess && UserState.isNeedReturn(mUser.getStatus())) {
            getCarParkInfo();
        }


        if (null != carResp) {
            if (carResp.getBootType() == 1) {
                power_linear.setVisibility(View.VISIBLE);
            } else {
                power_linear.setVisibility(View.GONE);
            }

            //电池剩余量
            String battery = carResp.getBatteryResidual() + "";
            int batteryPercent = getBatteryLeftPercent(battery);
            //车辆信息
            carInfoView.setData(carResp.getCarColor(), carResp.getCarSetsNums() + "座", carResp.getCarNumber(),
                    carResp.getCarBrand() + carResp.getModels(),
                    batteryPercent, carResp.getCanUseMileage(), carResp.getIsRedPkCar(), false);
            //分时租赁帮助
            useCarCostView.setOnUseCarHelpClickListener(new UseCarCostView.OnUseCarHelpClickListener() {
                @Override
                public void onUseCarHelpClick() {
                    showFeeUnitTip();
                }
            });
        }

        handler = new MyHandler(this);
        Message msg = handler.obtainMessage();
        msg.what = 1;
        handler.sendMessageDelayed(msg, 1000 * 60);

        if (null != parksRespChooseReturn) {
            returnCarParkNaviView.setData(UseCarReturnActivity.this, parksRespChooseReturn.getParkName(),
                    parksRespChooseReturn.getParkAddress(), parksRespChooseReturn.getLatlng());
        }

        closeHandler = new PublicReceiver(SBUtils.UPDATE_MAP_PARKS_INFO);
        closeHandler.setBeanReceive(new PublicReceiver.IBeanReceive() {
            @Override
            public void getBean() {
                Logger.i(TAG, "还车成功后关掉Handler");
                if (handler != null) {
                    handler.removeCallbacksAndMessages(null);
                    finish();
                }
            }
        });

        observeRxEventCode();
    }

    @Override
    protected void onStart() {
        super.onStart();
        PermissionsUtils.checkLocationPermission(this);
    }

    @Override
    protected void onResume() {
        super.onResume();
        getFee();
        //判断GPS模块是否开启
        isOpenGps();
    }

    private void observeRxEventCode() {
        busSubscription = RxBus.getInstance()
                .toObservable(RxBusEvent.class)
                .subscribe(new Action1<RxBusEvent>() {
                    @Override
                    public void call(RxBusEvent rxBusEvent) {
                        int eventCode = rxBusEvent.getEventCode();
                        switch (eventCode) {
                            case RxEventCodes.SERVER_PUSH_RETURN_CAR://后台还车
                                Intent intent = new Intent(mContext, AllOrderActivity.class);
                                intent.putExtra("toMain", 1);
                                startActivity(intent);
                                break;
                            case RxEventCodes.CODE_SEARCH_PARK_FROM_USE_CAR://选择网点后
                                ParksResp parksResp = (ParksResp) rxBusEvent.getContent();
                                if (null != parksResp) {
                                    returnCarParkNaviView.setData(UseCarReturnActivity.this, parksResp.getParkName(),
                                            parksResp.getParkAddress(), parksResp.getLatlng());
                                    //记录该还车网点
                                    recordChoosePark(parksResp.getId());
                                }
                                break;
                        }
                    }
                });
    }

    /**
     * 获取电池的剩余百分比
     *
     * @return
     */
    private int getBatteryLeftPercent(String battery) {
        int batteryPercent = 0;
        if (!StringUtils.isEmpty(battery)) {
            double batteryD = Double.valueOf(battery);
            if (batteryD > 100) {
                batteryD = 100;
            } else if (batteryD < 0) {
                batteryD = 0;
            }
            batteryPercent = (int) batteryD;
        }
        return batteryPercent;
    }

    /**
     * 显示计费提示框
     */
    private void showFeeUnitTip() {
        final CustomAlertDialog customAlertDialog = CustomAlertDialog.getAlertDialog(mContext, true, true);
        FeeUnitMoneyTipView feeUnitMoneyTipView = new FeeUnitMoneyTipView(mContext);
        feeUnitMoneyTipView.setData("分时租赁收费", carResp);
        customAlertDialog
                .setViewContainer(feeUnitMoneyTipView)
                .setBtnConfirmColor(R.color.new_primary)
                .setOnPositiveClickListener("知道了", new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        customAlertDialog.dismiss();
                    }
                }).show();
    }

    /**
     * 复活的车辆信息
     */
    private void getCarParkInfo() {
        UserInfoResp mUser = CacheUtils.getIn().getUserInfo();
        CarParkResp carParkResp = (CarParkResp) getIntent().getSerializableExtra("recoverData");
        if (null != carParkResp) {
            carResp = carParkResp.getCarBaseInfo();
            if (carResp != null) {
                orderId = carResp.getCarSharingOrderNo();
                isRevival = true;
            } else if (MyApplication.isLoginSuccess && UserState.isNeedRevival(mUser.getStatus())) {
                if (mUser.getStatus().equals(UserState.USER_STATUS_RETURN)) {//还车状态，进入还车页面
//                activityUtil.jumpTo(ReturnCarActivity.class);
                    activityUtil.jumpTo(UseCarReturnActivity.class);
                    finish();
                } else {//订单和使用车辆状态
                    if (carResp != null) {
                        orderId = carResp.getCarSharingOrderNo();
                        isRevival = true;
                    }
                }
            }
            CarParkResp.BeforeHandPark beforeHandPark = carParkResp.getBeforehandPark();
            if (null != beforeHandPark) {
                parksRespChooseReturn = new ParksResp();
                parksRespChooseReturn.setId(beforeHandPark.getId() + "");
                parksRespChooseReturn.setParkName(beforeHandPark.getParkName());
                parksRespChooseReturn.setParkAddress(beforeHandPark.getParkAddress());
                parksRespChooseReturn.setLatitude(beforeHandPark.getLatitude());
                parksRespChooseReturn.setLongitude(beforeHandPark.getLongitude());
            }
        }
    }

    @Override
    public void onComplete(String result, int type) {
        if (isSuccess(result)) {
            if (type == FIND_CAR_CODE) {//找车
                showSuccessDialog("鸣笛成功");
            } else if (type == OPEN_DOOR_CODE) {//开锁
                showSuccessDialog("开锁成功");
            } else if (type == CLOSE_DOOR_CODE) {//锁门
                showSuccessDialog("锁门成功");
            } else if (type == POWER_OFF_CODE) {
                open_power.setImageResource(R.mipmap.yc_64);
                close_power.setImageResource(R.mipmap.yc_63);
                showSuccessDialog("关闭动力成功");
            } else if (type == POWER_ON_CODE) {
                open_power.setImageResource(R.mipmap.yc_63);
                close_power.setImageResource(R.mipmap.yc_64);
                showSuccessDialog("开启动力成功");
            } else if (type == USE_CAR_COST) {
                UseFeeResp useFeeResp = getBean(result, UseFeeResp.class);
                if (null == useFeeResp) {
                    return;
                }
                useTime = useFeeResp.getSharingOrderTime();
                int minute = useFeeResp.getSharingOrderTime();

                if (null != carResp) {
                    //电池剩余量
                    String battery = useFeeResp.getBattery();
                    int batteryPercent = getBatteryLeftPercent(battery);
                    //车辆信息
                    carInfoView.updateBatteryData(batteryPercent, useFeeResp.getEnduranceMileage());
                }
                //使用费用，里程，时长
                useCarCostView.setData(minute * 1000 * 60 + "", useFeeResp.getSharingOrderMiles(), useFeeResp.getSharingOrderTotalMoney());

            } else if (type == QUERY_AUDIT_STATUS) {//查询停车费报销审核进度
                ParkingFeeAuditStatusResp resp = getBean(result, ParkingFeeAuditStatusResp.class);

                if (StringUtils.isEmpty(result)) {
                    //填写报销单
                    startToParkingFeeReturnActivity();
                } else {
                    //查看进度条
                    Intent intent = new Intent(mContext, ParkingFeeStatusActivity.class);
                    intent.putExtra("auditStatus", resp);
                    if (null != carResp) {
                        intent.putExtra("carNumber", carResp.getCarNumber());
                        intent.putExtra("orderId", orderId);
                    }
                    startActivity(intent);
                }
            }
        } else {
            if (type == FIND_CAR_CODE) {//找车
                showFailureDialog(2, "鸣笛失败", getMsg(result), "取消", "重试");
            } else if (type == OPEN_DOOR_CODE) {//开锁
                showFailureDialog(3, "开锁失败", getMsg(result), "取消", "重试");
            } else if (type == CLOSE_DOOR_CODE) {//锁门
                showFailureDialog(4, "锁门失败", getMsg(result), "取消", "重试");
            } else if (type == QUERY_AUDIT_STATUS) {//查询停车费报销审核进度
                //填写报销单
                startToParkingFeeReturnActivity();
            } else if (type == POWER_OFF_CODE) {
                showFailureDialog(4, "关闭动力失败", getMsg(result), "取消", "重试");
            } else if (type == POWER_ON_CODE) {
                showFailureDialog(4, "开启动力失败", getMsg(result), "取消", "重试");
            }
        }
    }

    @Override
    public void onFailure(String msg, int type) {
        if (type == FIND_CAR_CODE) {//找车
            showFailureDialog(2, "鸣笛失败", "当前网络不太好，请检查您的网络连接", "取消", "重试");
        } else if (type == OPEN_DOOR_CODE) {//开锁
            showFailureDialog(3, "开锁失败", "当前网络不太好，请检查您的网络连接", "取消", "重试");
        } else if (type == CLOSE_DOOR_CODE) {//锁门
            showFailureDialog(4, "锁门失败", "当前网络不太好，请检查您的网络连接", "取消", "重试");
        }
    }

    @OnClick({R.id.open_power_linear, R.id.close_power_linear, R.id.ivTitleLeft, R.id.llytTitleRight, R.id.tvWhistle, R.id.tvOpenDoor, R.id.tvCloseDoor, R.id.tvReturnCar, R.id.tv_refund_park_fee})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.ivTitleLeft:
                finishPage();
                break;
            case R.id.llytTitleRight://车辆位置
                Intent intent = new Intent(mContext, CarPositionActivity.class);
                intent.putExtra("carInfoCode", carResp);
                intent.putExtra("from", 4);//复活
                intent.putExtra("useTime", useTime + "");
                intent.putExtra("orderId", orderId);
                startActivity(intent);
                break;
            case R.id.tvWhistle://鸣笛
                if (null != carResp) {
                    controlCar(carResp.getCarNumber(), FIND_CAR);
                }
                break;
            case R.id.tvOpenDoor://开锁
                if (null != carResp) {
                    controlCar(carResp.getCarNumber(), OPEN_DOOR);
                }
                break;
            case R.id.tvCloseDoor:
                if (null != carResp) {
                    controlCar(carResp.getCarNumber(), CLOSE_DOOR);
                }
                break;
            case R.id.open_power_linear: //开动力
                if (null != carResp) {
                    controlCar(carResp.getCarNumber(), POWER_ON);
                }
                break;
            case R.id.close_power_linear://关动力
                if (null != carResp) {
                    controlCar(carResp.getCarNumber(), POWER_OFF);
                }
                break;
            case R.id.tvReturnCar://还车
                Intent intent1 = new Intent(mContext, ChooseReturnParkActivity.class);
                intent1.putExtra("orderId", orderId);
                intent1.putExtra("fromReturn", Config.RETURN_CAR_HOUR);
                startActivity(intent1);
                break;
            case R.id.tv_refund_park_fee://报销停车费
                getParkingFeeAuditStatus();
                break;
        }
    }

    /**
     * 控制车辆
     *
     * @param lpn  车牌号
     * @param type findCar-找车,openDoor-打开车门,closeDoor-关闭车门
     */
    public void controlCar(String lpn, String type) {
        ControlCarRequest request = new ControlCarRequest();
        request.setCarNumber(lpn);
        request.setOperateType(type);
        request.setMethod(RequestUrls.OPERATE_CAR);
        if (FIND_CAR.equals(type)) {
            doGet(request, FIND_CAR_CODE, "正在鸣笛...", true);
        } else if (OPEN_DOOR.equals(type)) {
            doGet(request, OPEN_DOOR_CODE, "正在开锁...", true);
        } else if (CLOSE_DOOR.equals(type)) {
            doGet(request, CLOSE_DOOR_CODE, "正在锁门...", true);
        } else if (POWER_OFF.equals(type)) {
            doGet(request, POWER_OFF_CODE, "正在关闭动力...", true);
        } else if (POWER_ON.equals(type)) {
            doGet(request, POWER_ON_CODE, "正在开启动力...", true);
        }
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK
                && event.getRepeatCount() == 0) {

            finishPage();
            return true;
        }

        return super.onKeyDown(keyCode, event);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (handler != null) {
            handler.removeCallbacksAndMessages(null);
        }
    }

    private void finishPage() {
        //跳转到复活的地图页面
        Intent intent = new Intent(mContext, CarPositionActivity.class);
        intent.putExtra("carInfoCode", carResp);
        intent.putExtra("from", 3);//复活
        intent.putExtra("useTime", useTime + "");
        intent.putExtra("orderId", orderId);
        startActivity(intent);
    }

    /**
     * 获取费用
     */
    private void getFee() {
        UseCarCostRequest request = new UseCarCostRequest();
        request.setCarSharingOrderNumber(orderId);
        request.setMethod(RequestUrls.QUERY_USE_CAR_COST);
        doGet(request, USE_CAR_COST, "", false);
    }

    /**
     * 显示成功弹窗
     */
    private void showSuccessDialog(String text) {
        ToastUtil.showImage(this, text);
    }

    /**
     * 显示失败对话框
     */
    private void showFailureDialog(final int type, String title, String message, String negativeText, String positiveText) {
        final CustomAlertDialog2 dialog2 = CustomAlertDialog2.getAlertDialog(mContext, true, true);
        dialog2.setTitle(title);
        dialog2.setBackgroundImg(R.mipmap.dialog_failure_bg);
        dialog2.setMessage(message)
                .setOnNegativeClickListener(negativeText, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        dialog2.dismiss();
                    }
                })
                .setOnPositiveClickListener(positiveText, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (2 == type) {//找车
                            if (null != carResp) {
                                controlCar(carResp.getCarNumber(), FIND_CAR);
                            }
                        } else if (3 == type) {//开锁
                            if (null != carResp) {
                                controlCar(carResp.getCarNumber(), OPEN_DOOR);
                            }
                        } else if (4 == type) {//锁门
                            if (null != carResp) {
                                controlCar(carResp.getCarNumber(), CLOSE_DOOR);
                            }
                        } else if (5 == type) {  //关动力
                            if (null != carResp) {
                                controlCar(carResp.getCarNumber(), POWER_OFF);
                            }
                        } else if (6 == type) {    //开动力
                            if (null != carResp) {
                                controlCar(carResp.getCarNumber(), POWER_ON);
                            }
                        }
                        dialog2.dismiss();
                    }
                })
                .show();
    }

    /**
     * 查询停车费报销审核进度
     */
    public void getParkingFeeAuditStatus() {
        if (carResp != null) {
            ParkingFeeAuditStatusRequest request = new ParkingFeeAuditStatusRequest();
            request.setOrderId(orderId);
            request.setMethod(RequestUrls.QUERY_PARKING_FEE_AUDIT_STATUS);
            doGet(request, QUERY_AUDIT_STATUS, Config.LOADING_STRING, true);
        }
    }

    /**
     * 填写报销单
     */
    private void startToParkingFeeReturnActivity() {
        if (carResp != null) {
            Intent intent2 = new Intent(this, ParkingFeeReturnActivity.class);
            intent2.putExtra("carNumber", carResp.getCarNumber());
            intent2.putExtra("orderId", orderId);
            startActivity(intent2);
        }
    }

    /**
     * 记录选择的还车网点
     */
    private void recordChoosePark(String parkId) {
        RecordChooseParkRequest request = new RecordChooseParkRequest();
        request.setParkId(parkId);
        request.setOrderId(orderId);
        request.setMethod(RequestUrls.RECORD_CHOOSE_PARK);
        doGet(request, RECORD_CHOOSE_PARK, "", false);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (grantResults.length > 0 && grantResults[0] != PackageManager.PERMISSION_GRANTED) {
            if (requestCode == PermissionsConstant.REQUEST_LOCATION) {
                //提示打开定位权限
                toOpenLocatedPermission();
            }
        }
    }
}
